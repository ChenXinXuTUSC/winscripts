GET_LIB_SUFFIX(static_lib_suffix shared_lib_suffix)
SET(STATIC_LIB_SUFFIX ${static_lib_suffix})
SET(SHARED_LIB_SUFFIX ${shared_lib_suffix})

IF(USE_STATIC_LIB)
    SET(SRCLIB_SUFFIX ${STATIC_LIB_SUFFIX})
ELSE()
    SET(SRCLIB_SUFFIX ${SHARED_LIB_SUFFIX})
ENDIF()

# propagate to CMakeLists.txt in app dir
SET(STATIC_LIB_SUFFIX ${STATIC_LIB_SUFFIX} PARENT_SCOPE)
SET(SHARED_LIB_SUFFIX ${SHARED_LIB_SUFFIX} PARENT_SCOPE)
SET(SRCLIB_SUFFIX     ${SRCLIB_SUFFIX}     PARENT_SCOPE)
SET(SRCLIB_LIST )


# imported libs may need to be linked first
FILE(
    GLOB_RECURSE IMPORTED_LIB_LIST 
    ${PROJECT_SOURCE_DIR}/lib/imported/${CMAKE_BUILD_TYPE}/*${STATIC_LIB_SUFFIX}
    ${PROJECT_SOURCE_DIR}/lib/imported/${CMAKE_BUILD_TYPE}/*${SHARED_LIB_SUFFIX}
)
SET(IMPORTED_LIB_LIST ${IMPORTED_LIB_LIST} PARENT_SCOPE)
LIST(REMOVE_DUPLICATES IMPORTED_LIB_LIST)
GET_LIB_NAME("${IMPORTED_LIB_LIST}" return_list)
SET(IMPORTED_LIB_NAMES ${return_list})
# build the entire src dir as a library first, as other
# sub-directories may  have  cross  references  between
# each other, and require symbols linking.
FILE(
    GLOB_RECURSE INNER_REF_LIST
    ${CMAKE_CURRENT_SOURCE_DIR}/*.cpp
    ${CMAKE_CURRENT_SOURCE_DIR}/*.c
)
IF(INNER_REF_LIST)
    ADD_LIBRARY("inner" ${LIB_TYPE} ${INNER_REF_LIST})
    TARGET_LINK_LIBRARIES("inner" ${IMPORTED_LIB_NAMES})
ENDIF()


FILE(
    GLOB INSRC_LIST
    ${CMAKE_CURRENT_SOURCE_DIR}/*.cpp
    ${CMAKE_CURRENT_SOURCE_DIR}/*.c
)
IF(INSRC_LIST)
    ADD_LIBRARY("insrc" ${LIB_TYPE} ${INSRC_LIST})
    TARGET_LINK_LIBRARIES("insrc" ${IMPORTED_LIB_NAMES} "inner")

	SET(SRCLIB_LIST ${LIBRARY_OUTPUT_PATH}/libinsrc${SRCLIB_SUFFIX})
    # INSTALL(
    #     TARGETS runtime
    #     # CMake treats 'SHARED' library as type 'RUNTIME object'
    #     LIBRARY DESTINATION ${EXECUTABLE_OUTPUT_PATH}
    #     RUNTIME DESTINATION ${EXECUTABLE_OUTPUT_PATH}
    #     # ARCHIVE DESTINATION ${PROJECT_SOURCE_DIR}/bin/${CMAKE_BUILD_TYPE}
    # )
    
    # PRINT_LIST_ITEM("${SRC_LIST}" "SRC LIST" "")
ENDIF()


# list all sub-directories under the src directory
# do not use macro func 'GET_ALL_SUBDIRS', we just
# need the first level sub-directories
FILE(GLOB DIR_NODES LIST_DIRECTORIES TRUE ${CMAKE_CURRENT_SOURCE_DIR}/*)
SET(SUBSRC_DIRS )
FOREACH(NODE IN LISTS DIR_NODES)
    IF(IS_DIRECTORY ${NODE})
        SET(SUBSRC_DIRS ${SUBSRC_DIRS} ${NODE})
    ENDIF()
ENDFOREACH()
PRINT_LIST_ITEM("${SUBSRC_DIRS}" "SUB SOURCE DIR LIST" "")


FOREACH(SUBSRC_DIR IN LISTS SUBSRC_DIRS)
    FILE(
        GLOB_RECURSE SUBSRC_LIST
        ${SUBSRC_DIR}/*.c
        ${SUBSRC_DIR}/*.cpp
    )
    IF(SUBSRC_LIST) # in case some dirs are empty
        GET_FILENAME_COMPONENT(SUBLIB_NAME ${SUBSRC_DIR} NAME)
        ADD_LIBRARY(${SUBLIB_NAME} ${LIB_TYPE} ${SUBSRC_LIST})
        TARGET_LINK_LIBRARIES(${SUBLIB_NAME} ${IMPORTED_LIB_NAMES} "inner")

        SET(SRCLIB_LIST ${SRCLIB_LIST} ${LIBRARY_OUTPUT_PATH}/lib${SUBLIB_NAME}${SRCLIB_SUFFIX})
    ENDIF()
ENDFOREACH()
SET(SRCLIB_LIST ${SRCLIB_LIST} PARENT_SCOPE)

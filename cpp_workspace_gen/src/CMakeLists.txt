IF(${CMAKE_BUILD_TYPE} STREQUAL "Debug")
	ADD_DEFINITIONS(-DDEBUG)
ENDIF()
GET_LIB_SUFFIX(static_lib_suffix shared_lib_suffix)
SET(STATIC_LIB_SUFFIX ${static_lib_suffix})
SET(SHARED_LIB_SUFFIX ${shared_lib_suffix})

IF(USE_STATIC_LIB)
    SET(SRCLIB_SUFFIX ${STATIC_LIB_SUFFIX})
ELSE()
    SET(SRCLIB_SUFFIX ${SHARED_LIB_SUFFIX})
ENDIF()

# propagate to CMakeLists.txt in app dir
SET(STATIC_LIB_SUFFIX ${STATIC_LIB_SUFFIX} PARENT_SCOPE)
SET(SHARED_LIB_SUFFIX ${SHARED_LIB_SUFFIX} PARENT_SCOPE)
SET(SRCLIB_SUFFIX ${SRCLIB_SUFFIX} PARENT_SCOPE)

FILE(
    GLOB_RECURSE SRC_LIST
    ${PROJECT_SOURCE_DIR}/src/*.cpp
    ${PROJECT_SOURCE_DIR}/src/*.c
)

FILE(
    GLOB_RECURSE LIB_LIST 
    ${PROJECT_SOURCE_DIR}/lib/${CMAKE_BUILD_TYPE}/*${STATIC_LIB_SUFFIX}
    ${PROJECT_SOURCE_DIR}/lib/${CMAKE_BUILD_TYPE}/*${SHARED_LIB_SUFFIX}
)
LIST(REMOVE_DUPLICATES LIB_LIST)
SET(LIB_LIST ${LIB_LIST} PARENT_SCOPE)
PRINT_LIST_ITEM("${LIB_LIST}" "LIB LIST" "")

SET(SRC_LIB )
IF(SRC_LIST)
    ADD_LIBRARY(${SRC_LIB_NAME} ${LIB_TYPE} ${SRC_LIST})
    # third party libs
    GET_LIB_NAME("${LIB_LIST}" return_list)
    TARGET_LINK_LIBRARIES(${SRC_LIB_NAME} ${return_list})

	SET(SRC_LIB ${LIBRARY_OUTPUT_PATH}/lib${SRC_LIB_NAME}${SRCLIB_SUFFIX})
    SET(SRC_LIB ${SRC_LIB} PARENT_SCOPE)
    # INSTALL(
    #     TARGETS runtime
    #     # CMake treats 'SHARED' library as type 'RUNTIME object'
    #     LIBRARY DESTINATION ${EXECUTABLE_OUTPUT_PATH}
    #     RUNTIME DESTINATION ${EXECUTABLE_OUTPUT_PATH}
    #     # ARCHIVE DESTINATION ${PROJECT_SOURCE_DIR}/bin/${CMAKE_BUILD_TYPE}
    # )
    
    PRINT_LIST_ITEM("${SRC_LIST}" "SRC LIST" "")
ENDIF()
